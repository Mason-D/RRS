// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RRS.Data;

#nullable disable

namespace RRS.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RRS.Data.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Areas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Main",
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Outside",
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "Balcony",
                            RestaurantId = 1
                        });
                });

            modelBuilder.Entity("RRS.Data.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("People", (string)null);
                });

            modelBuilder.Entity("RRS.Data.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoOfGuests")
                        .HasColumnType("int");

                    b.Property<int>("ReservationOriginId")
                        .HasColumnType("int");

                    b.Property<int>("ReservationStatusId")
                        .HasColumnType("int");

                    b.Property<int>("SittingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ReservationOriginId");

                    b.HasIndex("ReservationStatusId");

                    b.HasIndex("SittingId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("RRS.Data.ReservationOrigin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReservationOrigins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "In-person"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Email"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Phone"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Online"
                        });
                });

            modelBuilder.Entity("RRS.Data.ReservationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReservationStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Confirmed"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Cancelled"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Seated"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Completed"
                        });
                });

            modelBuilder.Entity("RRS.Data.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Bean St, Sydney",
                            Email = "Bean@Scene.com",
                            Name = "Bean Scene",
                            PhoneNumber = "123-456-789"
                        });
                });

            modelBuilder.Entity("RRS.Data.Sitting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int>("SittingTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("SittingTypeId");

                    b.ToTable("Sittings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 40,
                            Duration = 240,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            Start = new DateTime(2022, 4, 6, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 60,
                            Duration = 180,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            Start = new DateTime(2022, 4, 6, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 80,
                            Duration = 300,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            Start = new DateTime(2022, 4, 6, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 40,
                            Duration = 240,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            Start = new DateTime(2022, 4, 7, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            Capacity = 60,
                            Duration = 180,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            Start = new DateTime(2022, 4, 7, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            Capacity = 80,
                            Duration = 300,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            Start = new DateTime(2022, 4, 7, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            Capacity = 40,
                            Duration = 240,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            Start = new DateTime(2022, 4, 8, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            Capacity = 60,
                            Duration = 180,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            Start = new DateTime(2022, 4, 8, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            Capacity = 80,
                            Duration = 300,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            Start = new DateTime(2022, 4, 8, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            Capacity = 40,
                            Duration = 240,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            Start = new DateTime(2022, 4, 9, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            Capacity = 60,
                            Duration = 180,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            Start = new DateTime(2022, 4, 9, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            Capacity = 80,
                            Duration = 300,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            Start = new DateTime(2022, 4, 9, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            Capacity = 40,
                            Duration = 240,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            Start = new DateTime(2022, 4, 10, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            Capacity = 60,
                            Duration = 180,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            Start = new DateTime(2022, 4, 10, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15,
                            Capacity = 80,
                            Duration = 300,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            Start = new DateTime(2022, 4, 10, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 16,
                            Capacity = 40,
                            Duration = 240,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            Start = new DateTime(2022, 4, 11, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 17,
                            Capacity = 60,
                            Duration = 180,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            Start = new DateTime(2022, 4, 11, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 18,
                            Capacity = 80,
                            Duration = 300,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            Start = new DateTime(2022, 4, 11, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 19,
                            Capacity = 40,
                            Duration = 240,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            Start = new DateTime(2022, 4, 12, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 20,
                            Capacity = 60,
                            Duration = 180,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            Start = new DateTime(2022, 4, 12, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 21,
                            Capacity = 80,
                            Duration = 300,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            Start = new DateTime(2022, 4, 12, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 22,
                            Capacity = 40,
                            Duration = 240,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            Start = new DateTime(2022, 4, 13, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 23,
                            Capacity = 60,
                            Duration = 180,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            Start = new DateTime(2022, 4, 13, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 24,
                            Capacity = 80,
                            Duration = 300,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            Start = new DateTime(2022, 4, 13, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 25,
                            Capacity = 40,
                            Duration = 240,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            Start = new DateTime(2022, 4, 14, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 26,
                            Capacity = 60,
                            Duration = 180,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            Start = new DateTime(2022, 4, 14, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 27,
                            Capacity = 80,
                            Duration = 300,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            Start = new DateTime(2022, 4, 14, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 28,
                            Capacity = 40,
                            Duration = 240,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            Start = new DateTime(2022, 4, 15, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 29,
                            Capacity = 60,
                            Duration = 180,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            Start = new DateTime(2022, 4, 15, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 30,
                            Capacity = 80,
                            Duration = 300,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            Start = new DateTime(2022, 4, 15, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 31,
                            Capacity = 40,
                            Duration = 240,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            Start = new DateTime(2022, 4, 16, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 32,
                            Capacity = 60,
                            Duration = 180,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            Start = new DateTime(2022, 4, 16, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 33,
                            Capacity = 80,
                            Duration = 300,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            Start = new DateTime(2022, 4, 16, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 34,
                            Capacity = 40,
                            Duration = 240,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            Start = new DateTime(2022, 4, 17, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 35,
                            Capacity = 60,
                            Duration = 180,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            Start = new DateTime(2022, 4, 17, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 36,
                            Capacity = 80,
                            Duration = 300,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            Start = new DateTime(2022, 4, 17, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 37,
                            Capacity = 40,
                            Duration = 240,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            Start = new DateTime(2022, 4, 18, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 38,
                            Capacity = 60,
                            Duration = 180,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            Start = new DateTime(2022, 4, 18, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 39,
                            Capacity = 80,
                            Duration = 300,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            Start = new DateTime(2022, 4, 18, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 40,
                            Capacity = 40,
                            Duration = 240,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            Start = new DateTime(2022, 4, 19, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 41,
                            Capacity = 60,
                            Duration = 180,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            Start = new DateTime(2022, 4, 19, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 42,
                            Capacity = 80,
                            Duration = 300,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            Start = new DateTime(2022, 4, 19, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 43,
                            Capacity = 40,
                            Duration = 240,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            Start = new DateTime(2022, 4, 20, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 44,
                            Capacity = 60,
                            Duration = 180,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            Start = new DateTime(2022, 4, 20, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 45,
                            Capacity = 80,
                            Duration = 300,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            Start = new DateTime(2022, 4, 20, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 46,
                            Capacity = 40,
                            Duration = 240,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            Start = new DateTime(2022, 4, 21, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 47,
                            Capacity = 60,
                            Duration = 180,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            Start = new DateTime(2022, 4, 21, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 48,
                            Capacity = 80,
                            Duration = 300,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            Start = new DateTime(2022, 4, 21, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 49,
                            Capacity = 40,
                            Duration = 240,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            Start = new DateTime(2022, 4, 22, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 50,
                            Capacity = 60,
                            Duration = 180,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            Start = new DateTime(2022, 4, 22, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 51,
                            Capacity = 80,
                            Duration = 300,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            Start = new DateTime(2022, 4, 22, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 52,
                            Capacity = 40,
                            Duration = 240,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            Start = new DateTime(2022, 4, 23, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 53,
                            Capacity = 60,
                            Duration = 180,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            Start = new DateTime(2022, 4, 23, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 54,
                            Capacity = 80,
                            Duration = 300,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            Start = new DateTime(2022, 4, 23, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 55,
                            Capacity = 40,
                            Duration = 240,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            Start = new DateTime(2022, 4, 24, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 56,
                            Capacity = 60,
                            Duration = 180,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            Start = new DateTime(2022, 4, 24, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 57,
                            Capacity = 80,
                            Duration = 300,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            Start = new DateTime(2022, 4, 24, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 58,
                            Capacity = 40,
                            Duration = 240,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            Start = new DateTime(2022, 4, 25, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 59,
                            Capacity = 60,
                            Duration = 180,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            Start = new DateTime(2022, 4, 25, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 60,
                            Capacity = 80,
                            Duration = 300,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            Start = new DateTime(2022, 4, 25, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 61,
                            Capacity = 40,
                            Duration = 240,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            Start = new DateTime(2022, 4, 26, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 62,
                            Capacity = 60,
                            Duration = 180,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            Start = new DateTime(2022, 4, 26, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 63,
                            Capacity = 80,
                            Duration = 300,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            Start = new DateTime(2022, 4, 26, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 64,
                            Capacity = 40,
                            Duration = 240,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            Start = new DateTime(2022, 4, 27, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 65,
                            Capacity = 60,
                            Duration = 180,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            Start = new DateTime(2022, 4, 27, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 66,
                            Capacity = 80,
                            Duration = 300,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            Start = new DateTime(2022, 4, 27, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 67,
                            Capacity = 40,
                            Duration = 240,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            Start = new DateTime(2022, 4, 28, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 68,
                            Capacity = 60,
                            Duration = 180,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            Start = new DateTime(2022, 4, 28, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 69,
                            Capacity = 80,
                            Duration = 300,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            Start = new DateTime(2022, 4, 28, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 70,
                            Capacity = 40,
                            Duration = 240,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            Start = new DateTime(2022, 4, 29, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 71,
                            Capacity = 60,
                            Duration = 180,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            Start = new DateTime(2022, 4, 29, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 72,
                            Capacity = 80,
                            Duration = 300,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            Start = new DateTime(2022, 4, 29, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 73,
                            Capacity = 40,
                            Duration = 240,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            Start = new DateTime(2022, 4, 30, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 74,
                            Capacity = 60,
                            Duration = 180,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            Start = new DateTime(2022, 4, 30, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 75,
                            Capacity = 80,
                            Duration = 300,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            Start = new DateTime(2022, 4, 30, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 76,
                            Capacity = 40,
                            Duration = 240,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            Start = new DateTime(2022, 5, 1, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 77,
                            Capacity = 60,
                            Duration = 180,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            Start = new DateTime(2022, 5, 1, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 78,
                            Capacity = 80,
                            Duration = 300,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            Start = new DateTime(2022, 5, 1, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 79,
                            Capacity = 40,
                            Duration = 240,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            Start = new DateTime(2022, 5, 2, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 80,
                            Capacity = 60,
                            Duration = 180,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            Start = new DateTime(2022, 5, 2, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 81,
                            Capacity = 80,
                            Duration = 300,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            Start = new DateTime(2022, 5, 2, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 82,
                            Capacity = 40,
                            Duration = 240,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            Start = new DateTime(2022, 5, 3, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 83,
                            Capacity = 60,
                            Duration = 180,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            Start = new DateTime(2022, 5, 3, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 84,
                            Capacity = 80,
                            Duration = 300,
                            IsOpen = true,
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            Start = new DateTime(2022, 5, 3, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("RRS.Data.SittingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SittingTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Breakfast"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Lunch"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Dinner"
                        });
                });

            modelBuilder.Entity("RRS.Data.Table", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AreaId = 1,
                            Description = "M1"
                        },
                        new
                        {
                            Id = 2,
                            AreaId = 1,
                            Description = "M2"
                        },
                        new
                        {
                            Id = 3,
                            AreaId = 1,
                            Description = "M3"
                        },
                        new
                        {
                            Id = 4,
                            AreaId = 1,
                            Description = "M4"
                        },
                        new
                        {
                            Id = 5,
                            AreaId = 1,
                            Description = "M5"
                        },
                        new
                        {
                            Id = 6,
                            AreaId = 1,
                            Description = "M6"
                        },
                        new
                        {
                            Id = 7,
                            AreaId = 1,
                            Description = "M7"
                        },
                        new
                        {
                            Id = 8,
                            AreaId = 1,
                            Description = "M8"
                        },
                        new
                        {
                            Id = 9,
                            AreaId = 1,
                            Description = "M9"
                        },
                        new
                        {
                            Id = 10,
                            AreaId = 1,
                            Description = "M10"
                        },
                        new
                        {
                            Id = 11,
                            AreaId = 2,
                            Description = "O1"
                        },
                        new
                        {
                            Id = 12,
                            AreaId = 2,
                            Description = "O2"
                        },
                        new
                        {
                            Id = 13,
                            AreaId = 2,
                            Description = "O3"
                        },
                        new
                        {
                            Id = 14,
                            AreaId = 2,
                            Description = "O4"
                        },
                        new
                        {
                            Id = 15,
                            AreaId = 2,
                            Description = "O5"
                        },
                        new
                        {
                            Id = 16,
                            AreaId = 2,
                            Description = "O6"
                        },
                        new
                        {
                            Id = 17,
                            AreaId = 2,
                            Description = "O7"
                        },
                        new
                        {
                            Id = 18,
                            AreaId = 2,
                            Description = "O8"
                        },
                        new
                        {
                            Id = 19,
                            AreaId = 2,
                            Description = "O9"
                        },
                        new
                        {
                            Id = 20,
                            AreaId = 2,
                            Description = "O10"
                        },
                        new
                        {
                            Id = 21,
                            AreaId = 3,
                            Description = "B1"
                        },
                        new
                        {
                            Id = 22,
                            AreaId = 3,
                            Description = "B2"
                        },
                        new
                        {
                            Id = 23,
                            AreaId = 3,
                            Description = "B3"
                        },
                        new
                        {
                            Id = 24,
                            AreaId = 3,
                            Description = "B4"
                        },
                        new
                        {
                            Id = 25,
                            AreaId = 3,
                            Description = "B5"
                        },
                        new
                        {
                            Id = 26,
                            AreaId = 3,
                            Description = "B6"
                        },
                        new
                        {
                            Id = 27,
                            AreaId = 3,
                            Description = "B7"
                        },
                        new
                        {
                            Id = 28,
                            AreaId = 3,
                            Description = "B8"
                        },
                        new
                        {
                            Id = 29,
                            AreaId = 3,
                            Description = "B9"
                        },
                        new
                        {
                            Id = 30,
                            AreaId = 3,
                            Description = "B10"
                        });
                });

            modelBuilder.Entity("RRS.Data.Customer", b =>
                {
                    b.HasBaseType("RRS.Data.Person");

                    b.Property<bool>("IsVIP")
                        .HasColumnType("bit");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("RRS.Data.Employee", b =>
                {
                    b.HasBaseType("RRS.Data.Person");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TaxFileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RRS.Data.Area", b =>
                {
                    b.HasOne("RRS.Data.Restaurant", "Restaurant")
                        .WithMany("Areas")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("RRS.Data.Person", b =>
                {
                    b.HasOne("RRS.Data.Restaurant", "Restaurant")
                        .WithMany("People")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("RRS.Data.Reservation", b =>
                {
                    b.HasOne("RRS.Data.Customer", "Customer")
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RRS.Data.ReservationOrigin", "ReservationOrigin")
                        .WithMany("Reservations")
                        .HasForeignKey("ReservationOriginId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RRS.Data.ReservationStatus", "ReservationStatus")
                        .WithMany("Reservations")
                        .HasForeignKey("ReservationStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RRS.Data.Sitting", "Sitting")
                        .WithMany("Reservations")
                        .HasForeignKey("SittingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("ReservationOrigin");

                    b.Navigation("ReservationStatus");

                    b.Navigation("Sitting");
                });

            modelBuilder.Entity("RRS.Data.Sitting", b =>
                {
                    b.HasOne("RRS.Data.Restaurant", "Restaurant")
                        .WithMany("Sittings")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RRS.Data.SittingType", "SittingType")
                        .WithMany("Sittings")
                        .HasForeignKey("SittingTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("SittingType");
                });

            modelBuilder.Entity("RRS.Data.Table", b =>
                {
                    b.HasOne("RRS.Data.Area", "Area")
                        .WithMany("Tables")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("RRS.Data.Customer", b =>
                {
                    b.HasOne("RRS.Data.Person", null)
                        .WithOne()
                        .HasForeignKey("RRS.Data.Customer", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RRS.Data.Employee", b =>
                {
                    b.HasOne("RRS.Data.Person", null)
                        .WithOne()
                        .HasForeignKey("RRS.Data.Employee", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RRS.Data.Area", b =>
                {
                    b.Navigation("Tables");
                });

            modelBuilder.Entity("RRS.Data.ReservationOrigin", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("RRS.Data.ReservationStatus", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("RRS.Data.Restaurant", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("People");

                    b.Navigation("Sittings");
                });

            modelBuilder.Entity("RRS.Data.Sitting", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("RRS.Data.SittingType", b =>
                {
                    b.Navigation("Sittings");
                });

            modelBuilder.Entity("RRS.Data.Customer", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
